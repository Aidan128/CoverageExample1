plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'jacoco'
}

android {
    compileSdk 30

    defaultConfig {
        applicationId "com.github.aidan128.coverage1"
        minSdk 28
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            testCoverageEnabled (project.hasProperty('coverage'))
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

task jacocoReport(type: JacocoReport) {
    group "Coverage"
    description "Generate XML/HTML code coverage reports"

    reports {
        xml.enabled = true
        html.enabled = true
    }

    getSourceDirectories().setFrom("${project.projectDir}/src/main/java")
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    getClassDirectories().setFrom(
            fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilter),
            fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter))
    getExecutionData().setFrom(
            fileTree(dir: "${buildDir}/outputs/code_coverage", includes: ['*.ec']))
}
